import { HtmlImageLayer, cancelCurrentlyRunningPlugins, isBrowser, serverSideSrc, HtmlVideoLayer } from '@cloudinary/html';
export { accessibility, lazyload, placeholder, responsive } from '@cloudinary/html';
import { defineComponent, ref, onMounted, onUpdated, onUnmounted, unref, openBlock, createElementBlock } from 'vue';

/**
 * Used in production
 */
const SDKAnalyticsConstants = {
    sdkSemver: "1.8.0",
    techVersion: "3.2.37",
    sdkCode: "L",
};

const _hoisted_1 = ["src"];
// Disabled linting due to [@vue/compiler-sfc] `defineProps` is a compiler macro and no longer needs to be imported.
// eslint-disable-next-line no-undef
var script$1 = /*#__PURE__*/ defineComponent({
    __name: 'AdvancedImage',
    props: {
        cldImg: { type: null, required: true },
        plugins: { type: null, required: false }
    },
    setup(__props) {
        const props = __props;
        /**
         * @memberOf CloudinaryVueSDK
         * @type {Component}
         * @description The Cloudinary image component.
         * @prop {CloudinaryImage} cldImg Generated by @cloudinary/url-gen
         * @prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()
         */
        const imageRef = ref(null);
        let htmlLayerInstance;
        const getSsrSrc = () => serverSideSrc(props.plugins, props.cldImg, SDKAnalyticsConstants);
        /**
         * On mount, creates a new HTMLLayer instance and initializes with ref to img element,
         * user generated cloudinaryImage and the plugins to be used.
         */
        onMounted(() => {
            htmlLayerInstance = new HtmlImageLayer(imageRef.value, props.cldImg, props.plugins, SDKAnalyticsConstants);
        });
        /**
         * On update, we cancel running plugins and update image instance with the state of user
         * cloudinaryImage and the state of plugins.
         */
        onUpdated(() => {
            cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
            // call html layer to update the dom again with plugins and reset toBeCanceled
            htmlLayerInstance.update(props.cldImg, props.plugins, SDKAnalyticsConstants);
        });
        /**
         * On unmount, we cancel the currently running plugins.
         */
        onUnmounted(() => {
            // Safely cancel running events on unmount.
            cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
        });
        return (_ctx, _cache) => {
            return (unref(isBrowser)())
                ? (openBlock(), createElementBlock("img", {
                    key: 0,
                    ref_key: "imageRef",
                    ref: imageRef
                }, null, 512 /* NEED_PATCH */))
                : (openBlock(), createElementBlock("img", {
                    key: 1,
                    src: getSsrSrc()
                }, null, 8 /* PROPS */, _hoisted_1));
        };
    }
});

script$1.__file = "src/components/AdvancedImage.vue";

// Disabled linting due to [@vue/compiler-sfc] `defineProps` is a compiler macro and no longer needs to be imported.
// eslint-disable-next-line no-undef
var script = /*#__PURE__*/ defineComponent({
    __name: 'AdvancedVideo',
    props: {
        cldVid: { type: null, required: true },
        plugins: { type: null, required: false },
        sources: { type: null, required: false }
    },
    setup(__props) {
        const props = __props;
        /**
         * @memberOf CloudinaryVueSDK
         * @type {Component}
         * @description The Cloudinary video component.
         * @prop {CloudinaryVideo} cldVid Generated by @cloudinary/url-gen
         * @prop {Plugins} plugins Advanced video component plugins accessibility(), responsive(), lazyload(), placeholder()
         */
        const videoRef = ref(null);
        let htmlLayerInstance;
        /**
         * On mount, creates a new HTMLLayer instance and initializes with ref to img element,
         * user generated cloudinaryVideo and the plugins to be used.
         */
        onMounted(() => {
            htmlLayerInstance = new HtmlVideoLayer(videoRef.value, props.cldVid, props.sources, props.plugins);
        });
        /**
         * On update, we cancel running plugins and update image instance with the state of user
         * cloudinaryVideo and the state of plugins.
         */
        onUpdated(() => {
            cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
            // call html layer to update the dom again with plugins and reset toBeCanceled
            htmlLayerInstance.update(props.cldVid, props.sources, props.plugins);
        });
        /**
         * On unmount, we cancel the currently running plugins.
         */
        onUnmounted(() => {
            // Safely cancel running events on unmount.
            cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
        });
        return (_ctx, _cache) => {
            return (openBlock(), createElementBlock("video", {
                ref_key: "videoRef",
                ref: videoRef
            }, null, 512 /* NEED_PATCH */));
        };
    }
});

script.__file = "src/components/AdvancedVideo.vue";

export { script$1 as AdvancedImage, script as AdvancedVideo };
