(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@cloudinary/html'), require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', '@cloudinary/html', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.CloudinaryVueSDK = {}, global.CloudinaryHtml, global.Vue));
})(this, (function (exports, html, vue) { 'use strict';

  /**
   * Used in production
   */
  const SDKAnalyticsConstants = {
      sdkSemver: "1.8.0",
      techVersion: "3.2.37",
      sdkCode: "L",
  };

  const _hoisted_1 = ["src"];
  // Disabled linting due to [@vue/compiler-sfc] `defineProps` is a compiler macro and no longer needs to be imported.
  // eslint-disable-next-line no-undef
  var script$1 = /*#__PURE__*/ vue.defineComponent({
      __name: 'AdvancedImage',
      props: {
          cldImg: { type: null, required: true },
          plugins: { type: null, required: false }
      },
      setup(__props) {
          const props = __props;
          /**
           * @memberOf CloudinaryVueSDK
           * @type {Component}
           * @description The Cloudinary image component.
           * @prop {CloudinaryImage} cldImg Generated by @cloudinary/url-gen
           * @prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()
           */
          const imageRef = vue.ref(null);
          let htmlLayerInstance;
          const getSsrSrc = () => html.serverSideSrc(props.plugins, props.cldImg, SDKAnalyticsConstants);
          /**
           * On mount, creates a new HTMLLayer instance and initializes with ref to img element,
           * user generated cloudinaryImage and the plugins to be used.
           */
          vue.onMounted(() => {
              htmlLayerInstance = new html.HtmlImageLayer(imageRef.value, props.cldImg, props.plugins, SDKAnalyticsConstants);
          });
          /**
           * On update, we cancel running plugins and update image instance with the state of user
           * cloudinaryImage and the state of plugins.
           */
          vue.onUpdated(() => {
              html.cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
              // call html layer to update the dom again with plugins and reset toBeCanceled
              htmlLayerInstance.update(props.cldImg, props.plugins, SDKAnalyticsConstants);
          });
          /**
           * On unmount, we cancel the currently running plugins.
           */
          vue.onUnmounted(() => {
              // Safely cancel running events on unmount.
              html.cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
          });
          return (_ctx, _cache) => {
              return (vue.unref(html.isBrowser)())
                  ? (vue.openBlock(), vue.createElementBlock("img", {
                      key: 0,
                      ref_key: "imageRef",
                      ref: imageRef
                  }, null, 512 /* NEED_PATCH */))
                  : (vue.openBlock(), vue.createElementBlock("img", {
                      key: 1,
                      src: getSsrSrc()
                  }, null, 8 /* PROPS */, _hoisted_1));
          };
      }
  });

  script$1.__file = "src/components/AdvancedImage.vue";

  // Disabled linting due to [@vue/compiler-sfc] `defineProps` is a compiler macro and no longer needs to be imported.
  // eslint-disable-next-line no-undef
  var script = /*#__PURE__*/ vue.defineComponent({
      __name: 'AdvancedVideo',
      props: {
          cldVid: { type: null, required: true },
          plugins: { type: null, required: false },
          sources: { type: null, required: false }
      },
      setup(__props) {
          const props = __props;
          /**
           * @memberOf CloudinaryVueSDK
           * @type {Component}
           * @description The Cloudinary video component.
           * @prop {CloudinaryVideo} cldVid Generated by @cloudinary/url-gen
           * @prop {Plugins} plugins Advanced video component plugins accessibility(), responsive(), lazyload(), placeholder()
           */
          const videoRef = vue.ref(null);
          let htmlLayerInstance;
          /**
           * On mount, creates a new HTMLLayer instance and initializes with ref to img element,
           * user generated cloudinaryVideo and the plugins to be used.
           */
          vue.onMounted(() => {
              htmlLayerInstance = new html.HtmlVideoLayer(videoRef.value, props.cldVid, props.sources, props.plugins);
          });
          /**
           * On update, we cancel running plugins and update image instance with the state of user
           * cloudinaryVideo and the state of plugins.
           */
          vue.onUpdated(() => {
              html.cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
              // call html layer to update the dom again with plugins and reset toBeCanceled
              htmlLayerInstance.update(props.cldVid, props.sources, props.plugins);
          });
          /**
           * On unmount, we cancel the currently running plugins.
           */
          vue.onUnmounted(() => {
              // Safely cancel running events on unmount.
              html.cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
          });
          return (_ctx, _cache) => {
              return (vue.openBlock(), vue.createElementBlock("video", {
                  ref_key: "videoRef",
                  ref: videoRef
              }, null, 512 /* NEED_PATCH */));
          };
      }
  });

  script.__file = "src/components/AdvancedVideo.vue";

  Object.defineProperty(exports, 'accessibility', {
    enumerable: true,
    get: function () { return html.accessibility; }
  });
  Object.defineProperty(exports, 'lazyload', {
    enumerable: true,
    get: function () { return html.lazyload; }
  });
  Object.defineProperty(exports, 'placeholder', {
    enumerable: true,
    get: function () { return html.placeholder; }
  });
  Object.defineProperty(exports, 'responsive', {
    enumerable: true,
    get: function () { return html.responsive; }
  });
  exports.AdvancedImage = script$1;
  exports.AdvancedVideo = script;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
